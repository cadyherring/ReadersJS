///////////////////// SpawningSimpleReader /////////////////////

subclass(SpawningSimpleReader, PerigramReader);
// subclassed from PerigramReader in order to have access to certain of its methods

function SpawningSimpleReader(g, rx, ry, speed) {

  Reader.call(this, g, rx, ry, speed); // superclass constructor
  this.type = 'SpawningSimpleReader'; //  superclass variable(s)

  this.consoleString = '';
  this.downWeighting = .6;
  this.upWeighting = .12;

  this.fill = RiText.defaultFill(); // or another color?
  if (!speed) this.speed = SPEED.Fluent; // default speed for SpawningSimpleReaders

  //Perigram Reader Color
  this.col = [5, 189, 4, 255]; // greenish
  // this.neighborCol = [127, 10, 30, 255];
  
  // factors
  this.fadeInFactor = .8;
  this.fadeOutFactor = 10;
  this.delayFactor = 2.5;
  
}

SpawningSimpleReader.prototype.onEnterCell = function (curr) {

  // console.log('onEnter: '+ curr.text() + " " + this.speed + " " + this.stepTime);
  // curr.showBounds(1); // DEBUG
  
  // ---- based on Java VB NeighborFadingVisual ---- //
  // variables needed individually for instances of perigram readers:
  this.actualStepTime = this.stepTime / 1000;
  this.fadeInTime = this.actualStepTime * this.fadeInFactor;
  this.fadeOutTime = this.actualStepTime * this.fadeOutFactor;
  this.delayBeforeFadeBack = this.actualStepTime * this.delayFactor;
  this.gridColor = RiText.defaultFill(); // DCH: is this interface-responsive enough?

  // fading current in and out
  fid = curr.colorTo(this.col, this.fadeInTime);
  curr.colorTo(this.gridColor, this.fadeOutTime, this.delayBeforeFadeBack + this.fadeInTime); // 1st arg: this.fill

  var g = Grid.gridFor(curr);
  var neighbors = g.neighborhood(curr);

  if (this._isViableDirection(this.lastRead(2), curr, neighbors[8], 8)) {
    info("SpawningSimple ack'd and spawned on " + neighbors[8].text());
    var coords = Grid.coordsFor(neighbors[8]);
    var spawned = new OnewayPerigramReader(g, coords.x, coords.y, SPEED.Fast, 8, curr);
  }
  else {
    // neighbors[8] && console.log("non-viable SE neighbor " + neighbors[8].text());
  }
  
}

SpawningSimpleReader.prototype.selectNext = function () {

  var last = this.lastRead(2),
    neighbors = Grid.gridFor(this.current).neighborhood(this.current);

  return this._determineReadingPath(last, neighbors);
}

SpawningSimpleReader.prototype.onExitCell = function (curr) {
  // unused dummy method override that prevents an error generated by superclass methods (in Reader)
}

SpawningSimpleReader.prototype._determineReadingPath = function (last, neighbors) {

  if (!neighbors) throw Error("no neighbors");

  if (!this.current) throw Error("no current cell!");

  return neighbors[5] || this.current; // 5 = E(ast), the natural next word

}

//////////////////////// Exports ////////////////////////

if (typeof module != 'undefined' && module.exports) { // for node

  module.exports = SpawningSimpleReader;
}
